{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAiBeA,EAfF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAE5B,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDAEdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,cAErBC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCEOS,EATE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OACnB,OACCR,EAAAC,EAAAC,cAAA,WACEM,EAAOC,IAAI,SAACC,EAAMC,GAClB,OAAOX,EAAAC,EAAAC,cAACU,EAAD,CAAMC,IAAKF,EAAGZ,GAAIS,EAAOG,GAAGZ,GAAIF,KAAMW,EAAOG,GAAGd,KAAMC,MAAOU,EAAOG,GAAGb,YCSnEgB,EAfG,SAAAlB,GAAsB,IAAnBmB,EAAmBnB,EAAnBmB,aACpB,OACCf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,SACCC,UAAU,mCACVa,KAAK,SACLC,YAAY,gBACZC,SACCH,MCHUI,EAJA,SAACC,GACf,OAAOpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAAYJ,EAAMK,WCiDjFC,qBA5Cd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAiBDI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAjB1CZ,EAAKa,MAAQ,CACZhC,OAAQ,GACR6B,YAAa,IAJDV,mFAUM,IAAAc,EAAAX,KACnBY,MAAM,8CACJC,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAACG,GAAD,OAAWL,EAAKL,SAAS,CAAE5B,OAAQsC,uCAQlC,IAAAC,EACwBjB,KAAKU,MAA7BhC,EADAuC,EACAvC,OAAQ6B,EADRU,EACQV,YACVW,EAAiBxC,EAAOyC,OAAO,SAACC,GACrC,OAAOA,EAAMrD,KACXsD,cACAC,SACAf,EAAYc,iBAIf,OAAQ3C,EAAO6C,OAGdrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,gBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWvC,aAAce,KAAKI,iBAC9BlC,EAAAC,EAAAC,cAACqD,EAAD,KACCvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQwC,MANpBhD,EAAAC,EAAAC,cAAA,4BAlCeuD,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.a2627599.chunk.js","sourcesContent":["import React from 'react';\r\n// a function that returns the card details (name & email). this is a pure component as it has props and it returns something\r\nconst Card = ({ name, email, id }) => {\r\n\t/* destructuring */\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t{/* tachyons */}\r\n\t\t\t<img alt='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t{/* robohash is the API plugin, the id increments from robot.js */}\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// creating a function that accesses the robots list, then maps the robots and increments them one by one with props (id, name and email) to the Card function.\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{robots.map((user, i) => {\r\n\t\t\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />;\r\n\t\t\t})}\r\n\t\t</div>\r\n\t);\r\n};\r\nexport default CardList;\r\n","import React from 'react';\r\n// a function that with an event passed through onChange in the search box.\r\nconst SearchBox = ({ searchChange }) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\t\ttype='search'\r\n\t\t\t\tplaceholder='search robots'\r\n\t\t\t\tonChange={\r\n\t\t\t\t\tsearchChange\r\n\t\t\t\t} /* // every time the onchange event is triggered, call the searchChange function  */\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\n// a function that takes in props and puts them in a box that is scrollable\r\nconst Scroll = (props) => {\r\n\treturn <div style={{ overflowY: 'scroll', border: '5px solid black', height: '700px' }}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n//Smart components as it has state\r\nclass App extends Component {\r\n\t// setting up the state for robots and searchfield so we can display different robots when searched\r\n\tconstructor() {\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchfield: ''\r\n\t\t};\r\n\t}\r\n\t// this method is called when an instance of a component is being created and inserted into the DOM\r\n\t// first it's constructor, then componentwillmount, then render and finally componentdidmount. render runs again at the end because we updated the state.\r\n\t// this function is run to fetch the users through JSONplaceholder API and changes the states of the robots to the users on the API\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then((response) => response.json())\r\n\t\t\t.then((users) => this.setState({ robots: users }));\r\n\t}\r\n\r\n\t//use arrow function as normal function is not part of react. this makes sure 'this' is from the App.\r\n\t// a function that takes the event(just like dom manipulation) that passes the event.target.value to the searchfield state\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchfield: event.target.value });\r\n\t};\r\n\trender() {\r\n\t\tconst { robots, searchfield } = this.state; //destructuring\r\n\t\tconst filteredRobots = robots.filter((robot) => {\r\n\t\t\treturn robot.name\r\n\t\t\t\t.toLowerCase()\r\n\t\t\t\t.includes(\r\n\t\t\t\t\tsearchfield.toLowerCase()\r\n\t\t\t\t); /* if the name fo the robots in lower case includes the string in the searchfield, return the robots true to this*/\r\n\t\t});\r\n\t\t// if the robot length is high, return loading until they load.\r\n\t\treturn !robots.length ? ( //! means false\r\n\t\t\t<h1>Loading</h1>\r\n\t\t) : (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1 className='f1'> RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n// import { robots } from './robots';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}